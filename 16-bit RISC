// 16-bit RISC Processor Modules and Testbenches
1. Instruction Memory
module InstructionMemory (
    input [15:0] address,
    output reg [15:0] instruction
);
    reg [15:0] mem [0:255]; // 256 x 16-bit memory

    initial begin
        // Load some sample instructions
        mem[0] = 16'h0001; // Example instruction
        mem[1] = 16'h0002;
        mem[2] = 16'h0003;
    end

    always @(*) begin
        instruction = mem[address];
    end
endmodule

// Testbench for Instruction Memory
module InstructionMemory_tb;
    reg [15:0] address;
    wire [15:0] instruction;

    InstructionMemory uut (
        .address(address),
        .instruction(instruction)
    );

    initial begin
        address = 0;
        #10;
        $display("Instruction at address 0: %h", instruction);

        address = 1;
        #10;
        $display("Instruction at address 1: %h", instruction);

        $finish;
    end
endmodule

2. Register File
module RegisterFile (
    input clk,
    input [3:0] read_reg1, read_reg2, write_reg,
    input [15:0] write_data,
    input reg_write,
    output [15:0] read_data1, read_data2
);
    reg [15:0] registers [0:15]; // 16 x 16-bit registers

    always @(posedge clk) begin
        if (reg_write) begin
            registers[write_reg] <= write_data;
        end
    end

    assign read_data1 = registers[read_reg1];
    assign read_data2 = registers[read_reg2];
endmodule

// Testbench for Register File
module RegisterFile_tb;
    reg clk;
    reg [3:0] read_reg1, read_reg2, write_reg;
    reg [15:0] write_data;
    reg reg_write;
    wire [15:0] read_data1, read_data2;

    RegisterFile uut (
        .clk(clk),
        .read_reg1(read_reg1),
        .read_reg2(read_reg2),
        .write_reg(write_reg),
        .write_data(write_data),
        .reg_write(reg_write),
        .read_data1(read_data1),
        .read_data2(read_data2)
    );

    initial begin
        clk = 0;
        forever #5 clk = ~clk;
    end

    initial begin
        reg_write = 1;
        write_reg = 4'b0001;
        write_data = 16'h1234;
        #10;

        reg_write = 0;
        read_reg1 = 4'b0001;
        #10;
        $display("Read Data 1: %h", read_data1);

        $finish;
    end
endmodule

3. Data Memory
module DataMemory (
    input clk,
    input [15:0] address,
    input [15:0] write_data,
    input mem_write, mem_read,
    output [15:0] read_data
);
    reg [15:0] mem [0:255]; // 256 x 16-bit memory

    always @(posedge clk) begin
        if (mem_write) begin
            mem[address] <= write_data;
        end
    end

    assign read_data = (mem_read) ? mem[address] : 16'h0000;
endmodule

// Testbench for Data Memory
module DataMemory_tb;
    reg clk;
    reg [15:0] address, write_data;
    reg mem_write, mem_read;
    wire [15:0] read_data;

    DataMemory uut (
        .clk(clk),
        .address(address),
        .write_data(write_data),
        .mem_write(mem_write),
        .mem_read(mem_read),
        .read_data(read_data)
    );

    initial begin
        clk = 0;
        forever #5 clk = ~clk;
    end

    initial begin
        mem_write = 1;
        address = 16'h0001;
        write_data = 16'h5678;
        #10;

        mem_write = 0;
        mem_read = 1;
        #10;
        $display("Read Data: %h", read_data);

        $finish;
    end
endmodule
4. ALU
module ALU (
    input [15:0] src1, src2,
    input [2:0] alu_control,
    output reg [15:0] result,
    output zero
);
    always @(*) begin
        case (alu_control)
            3'b000: result = src1 + src2; // ADD
            3'b001: result = src1 - src2; // SUB
            3'b010: result = src1 & src2; // AND
            3'b011: result = src1 | src2; // OR
            3'b100: result = ~(src1 | src2); // NOR
            default: result = 16'h0000;
        endcase
    end

    assign zero = (result == 16'h0000);
endmodule

// Testbench for ALU
module ALU_tb;
    reg [15:0] src1, src2;
    reg [2:0] alu_control;
    wire [15:0] result;
    wire zero;

    ALU uut (
        .src1(src1),
        .src2(src2),
        .alu_control(alu_control),
        .result(result),
        .zero(zero)
    );

    initial begin
        src1 = 16'h0001;
        src2 = 16'h0002;
        alu_control = 3'b000; // ADD
        #10;
        $display("Result: %h, Zero: %b", result, zero);

        $finish;
    end
endmodule
5. ALU Control Unit
module ALUControl (
    input [2:0] funct,
    input [1:0] alu_op,
    output reg [2:0] alu_control
);
    always @(*) begin
        case (alu_op)
            2'b00: alu_control = 3'b000; // ADD
            2'b01: alu_control = 3'b001; // SUB
            2'b10: case (funct)
                3'b000: alu_control = 3'b000; // ADD
                3'b001: alu_control = 3'b001; // SUB
                3'b010: alu_control = 3'b010; // AND
                3'b011: alu_control = 3'b011; // OR
                default: alu_control = 3'b000;
            endcase
            default: alu_control = 3'b000;
        endcase
    end
endmodule

// Testbench for ALU Control
module ALUControl_tb;
    reg [2:0] funct;
    reg [1:0] alu_op;
    wire [2:0] alu_control;

    ALUControl uut (
        .funct(funct),
        .alu_op(alu_op),
        .alu_control(alu_control)
    );

    initial begin
        funct = 3'b000;
        alu_op = 2'b10;
        #10;
        $display("ALU Control: %b", alu_control);

        $finish;
    end
endmodule
6. Datapath
module datapath (
    input clk,
    input reset,
    input [15:0] in_data,      // Data input (e.g., from memory)
    input [15:0] ALU_result,   // Result from ALU
    input [15:0] reg_data,     // Data to be written into registers
    input [3:0] reg_addr,      // Register address for read/write
    input reg_write,           // Control signal for writing to register
    output reg [15:0] reg_out  // Output from the register
);
    // 16-bit Register File (for simplicity, only one register here)
    reg [15:0] reg_file [15:0]; // 16 registers of 16-bit width

    // On reset, initialize all registers to 0
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            reg_file[reg_addr] <= 16'b0; // Reset register value
            reg_out <= 16'b0;            // Reset output
        end
        else if (reg_write) begin
            reg_file[reg_addr] <= reg_data;  // Write data to register
        end
        else begin
            reg_out <= reg_file[reg_addr];   // Output value from register
        end
    end
endmodule

module datapath_tb;
    reg clk;
    reg reset;
    reg [15:0] in_data;
    reg [15:0] ALU_result;
    reg [15:0] reg_data;
    reg [3:0] reg_addr;
    reg reg_write;
    wire [15:0] reg_out;

    // Instantiate the datapath module
    datapath uut (
        .clk(clk),
        .reset(reset),
        .in_data(in_data),
        .ALU_result(ALU_result),
        .reg_data(reg_data),
        .reg_addr(reg_addr),
        .reg_write(reg_write),
        .reg_out(reg_out)
    );

    // Clock generation
    always begin
        #5 clk = ~clk;  // Toggle clock every 5ns
    end

    // Test procedure
    initial begin
        // Initial setup
        clk = 0;
        reset = 0;
        reg_data = 16'hABCD; // Data to be written to the register
        reg_addr = 4'b0001;   // Select register 1
        reg_write = 0;

        // Apply reset
        reset = 1;
        #10 reset = 0;
        
        // Write data to register (after reset)
        reg_write = 1;
        #10 reg_write = 0;
        
        // Check the output from register
        #10 if (reg_out == 16'hABCD) begin
            $display("Test Passed: Register output is %h", reg_out);
        end else begin
            $display("Test Failed: Register output is %h", reg_out);
        end

        // Apply new data and write to another register
        reg_data = 16'h1234;
        reg_addr = 4'b0010; // Select register 2
        reg_write = 1;
        #10 reg_write = 0;

        // Check new register output
        #10 if (reg_out == 16'h1234) begin
            $display("Test Passed: Register output is %h", reg_out);
        end else begin
            $display("Test Failed: Register output is %h", reg_out);
        end

        $finish;
    end
endmodule


7. Control Unit Module
module ControlUnit (
    input [15:0] instruction,
    output reg reg_write, mem_write, mem_read, alu_src, reg_dst
);
    always @(*) begin
        case (instruction[15:12])
            4'b0000: begin // ADD
                reg_write = 1;
                mem_write = 0;
                mem_read = 0;
                alu_src = 0;
                reg_dst = 1;
            end
            4'b0001: begin // SUB
                reg_write = 1;
                mem_write = 0;
                mem_read = 0;
                alu_src = 0;
                reg_dst = 1;
            end
            4'b0010: begin // LW (Load Word)
                reg_write = 1;
                mem_write = 0;
                mem_read = 1;
                alu_src = 1;
                reg_dst = 0;
            end
            4'b0011: begin // SW (Store Word)
                reg_write = 0;
                mem_write = 1;
                mem_read = 0;
                alu_src = 1;
                reg_dst = 0;
            end
            default: begin // Default case
                reg_write = 0;
                mem_write = 0;
                mem_read = 0;
                alu_src = 0;
                reg_dst = 0;
            end
        endcase
    end
endmodule

module ControlUnit_tb;
    reg [15:0] instruction;
    wire reg_write, mem_write, mem_read, alu_src, reg_dst;

    ControlUnit uut (
        .instruction(instruction),
        .reg_write(reg_write),
        .mem_write(mem_write),
        .mem_read(mem_read),
        .alu_src(alu_src),
        .reg_dst(reg_dst)
    );

    initial begin
        // Test ADD instruction
        instruction = 16'h0000;
        #10;
        $display("ADD: reg_write=%b, mem_write=%b, mem_read=%b, alu_src=%b, reg_dst=%b", reg_write, mem_write, mem_read, alu_src, reg_dst);

        $finish;
    end
endmodule



